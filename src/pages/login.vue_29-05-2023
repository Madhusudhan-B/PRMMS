<script setup>
import { VForm } from 'vuetify/components'
import { useAppAbility } from '@/plugins/casl/useAppAbility'
import AuthProvider from '@/views/pages/authentication/AuthProvider.vue'
import axios from '@axios'
import { useGenerateImageVariant } from '@core/composable/useGenerateImageVariant'
import { VNodeRenderer } from '@layouts/components/VNodeRenderer'
import jwt_decode from 'jwt-decode'
const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content')

//axios.defaults.headers.common['X-CSRF-TOKEN'] = csrfToken


import { themeConfig } from '@themeConfig'
import {
  emailValidator,
  requiredValidator,
} from '@validators'
import authV2LoginIllustrationBorderedDark from '@images/pages/port-4.jpg'
import authV2LoginIllustrationBorderedLight from '@images/pages/port-4.jpg'
import authV2LoginIllustrationDark from '@images/pages/port-4.jpg'
import authV2LoginIllustrationLight from '@images/pages/port-4.jpg'
import authV2MaskDark from '@images/pages/port-4.jpg'
import authV2MaskLight from '@images/pages/port-4.jpg'
import logo from '@images/pages/omp-logo.png'
import microsoft from '@images/pages/microsoft.jpg'
import avatar1 from '@images/avatars/avatar-1.png'
import {users} from '@/helpers/helper'
//import {msalLogin} from '@/helpers/MSALhelper'
import {hostURL,URL} from '@/helpers/token'
import * as msal from 'msal';
import msalConfig from '../config'


const idToken=ref('')
const accessToken=ref('')

const isAlertVisible = ref(false)

const errors = ref({
  username: undefined,
  password: undefined,
  message: undefined
})
const err=ref('')

const msalLogin =()=>{
  const loginRequest = {
    scopes: ['openid', 'profile'],
    expiresIn: 600
  };
  const msalInstance = new msal.UserAgentApplication(msalConfig)
  msalInstance.loginPopup(loginRequest)
        .then((response) => {
          console.log('Login success:', response);
         // msalInstance.logout()
          accessToken.value = response.idToken.rawIdToken

          idToken.value = response.idToken.rawIdToken;
        

      axios.post(URL()+`/user_management`,{
      
        'requestType':'view',
      
      }, { 'headers': { Authorization: 'Bearer '+accessToken.value } })
      .then((response) => {
        console.log('Check user status')
        console.log(response.data);
        let data = response.data.data
        console.log(data);
          // Decode the ID token to access the user data
          const decodedToken = jwt_decode(idToken.value);
        //  console.log('Decoded token:', decodedToken);

          // Extract the user data from the decoded token
          // const userData = {
          //   name: decodedToken.name,
          //   email: decodedToken.email,
          //   role: decodedToken.roles[0],
          // };
          // console.log('User data:', userData);
           const abilitiesList =data.abilities
           var abilitiesData=[]
           abilitiesList.forEach(item => {
           
            console.log(item.sub_module.short_code);
            if(item.add_permission){
             
              abilitiesData.push({    action: 'create',subject: item.sub_module.short_code,})
                  }

            if(item.delete_permission){
            
              abilitiesData.push({    action: 'delete',subject: item.sub_module.short_code,})
           
            }

            if(item.edit_permission){
             
              abilitiesData.push({    action: 'update',subject: item.sub_module.short_code,})
                 }


            if(item.view_permission){
           
              abilitiesData.push({    action: 'read',subject: item.sub_module.short_code,})
           
            }

          });
          console.log('abilitiesData')
          console.log(abilitiesData)

          var roles=''
          if(data.access_type=='user'){
            roles=data.id
            abilitiesData=[]
            abilitiesData.push({    action: 'manage',subject: 'all',})
          }
          if(data.access_type=='role'){
            roles=data.role
           
          }

          const  userData = {
    id: data.id,
    loginName: data.login_name,
    fullName: data.login_name,
    username: data.user_name,
    department: data.department,
    avatar: data.image_data,
    email: data.email,
    role: 'admin',
    abilities:abilitiesData
  
  }

  
    const userAbilities = abilitiesData
    
    localStorage.setItem('userAbilities', JSON.stringify(userAbilities))
      ability.update(userAbilities)
      localStorage.setItem('userData', JSON.stringify(userData))
      localStorage.setItem('accessToken', JSON.stringify(accessToken.value))

//       localStorage.setItem('accessDepartments', JSON.stringify(data.access_departments))
// console.log(userAbilities)
      // Redirect to `to` query if exist or redirect to index route
      router.replace(route.query.to ? String(route.query.to) : '/')

      
       
          })
          .catch((error) => {
              console.log(error)
              isAlertVisible.value = true
              // console.log(error.message)
              // console.log(error.config)
             console.log(error.response)
             if(error.response.status == 404){
              err.value = "Application access is restricted. Please contact the administrator for assistance."
             }
             if(error.response.status != 404){
              err.value = error.response.data.error
            }
             
          })
   
        })
        .catch((error) => {
          console.log('Login error:', error);
          isAlertVisible.value = true

         err.value = error
         //console.error(error)
         // msalInstance.logout()
        });
    
      // this.$AuthService.loginPopup() //with a popup
      //this.$AuthService.loginRedirect() //with a redirect
      
     // console.log(this.$AuthService)
    }



const authThemeImg = useGenerateImageVariant(authV2LoginIllustrationLight, authV2LoginIllustrationDark, authV2LoginIllustrationBorderedLight, authV2LoginIllustrationBorderedDark, true)
const authThemeMask = useGenerateImageVariant(authV2MaskLight, authV2MaskDark)
// const authLogo = useGenerateImageVariant(authV2MaskLight, authV2MaskDark)
const isPasswordVisible = ref(false)
const route = useRoute()
const router = useRouter()
const ability = useAppAbility()





const refVForm = ref()
const username = ref('apiuser')
const password = ref('zxcv4321')
const rememberMe = ref(false)
const usersdata= ref([])
const usertoken=ref('')

const login = () => {
  

  var urlencoded = new URLSearchParams();
                            urlencoded.append("grant_type", "password");
                            urlencoded.append("username",username.value);
                            urlencoded.append("password", password.value);
                            urlencoded.append("client_id", "client1");
                            urlencoded.append("client_secret", "zxcv4321");
  axios.post(hostURL()+'/o/token/',urlencoded).then(r => {
    const accessToken = r.data.access_token

    const  userData = {
    id: 1,
    fullName: 'John Doe',
    username: 'johndoe',
    password: 'admin',
    avatar: avatar1,
    email: 'admin@demo.com',
    role: 'admin',
    abilities: [
      {
        action: 'manage',
        subject: 'all',
      },
    ],
  }
    const userAbilities = [
      {
        action: 'manage',
        subject: 'all',
      },
    ]

    
    localStorage.setItem('userAbilities', JSON.stringify(userAbilities))
    ability.update(userAbilities)
    localStorage.setItem('userData', JSON.stringify(userData))
    localStorage.setItem('accessToken', JSON.stringify(accessToken))

    // Redirect to `to` query if exist or redirect to index route
    router.replace(route.query.to ? String(route.query.to) : '/')
   

   }).catch(e => {
    console.log(e)
    // const { errors: formErrors } = e.response.data

    // errors.value = formErrors
    // console.error(e.response.data)
  })
}

const onSubmit = () => {
  refVForm.value?.validate().then(({ valid: isValid }) => {
    if (isValid)
      login()
  })
}
</script>

<template >
        <VRow
        class=""
        >
              <VCol
              lg="8"
              style="padding: 0px !important;"
              >
                      <VImg
                      style=" box-shadow: 8px 0 8px -5px #333; padding-bottom:50px !important;"
                    class="bannerImg "
                      :src="authThemeImg"

                      />
                      <img
              
                :src="logo"
                style="height: 118px;position: absolute;top: 520px;left: 33px; background-color: #ffffff; padding: 15px 24px 15px 24px; border-radius: 24px"
                />
              <!-- <div class="position-relative auth-bg rounded-lg w-100 me-0" style=" box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); ">
              
              <VImg
              max-width="100%"
              :src="authThemeImg"

              />


              <VImg
              :src="authThemeMask"
              class="auth-footer-mask"
              />
              </div> -->
        </VCol>
             
        <VCol
        cols="12"
        lg="4"
        class="d-flex align-center justify-center"
        >
        <VCard
        flat
        :max-width="500"
        class="mt-12 mt-sm-0 pa-4"
        >
        <VCardText>
        <VImg
        max-width="505"
        :src="logo"
        style="height: 135px; margin-bottom:30px; object-fit: contain !important"
        />


        <p class="mb-0">
        Please sign-in to your account and start the adventure
        </p>
        </VCardText>
        
        <VCardText>
        <VForm
        ref="refVForm"
        @submit.prevent="onSubmit"
        >
        <VRow class="d-none">
        <!-- email -->
        <VCol cols="12">
        <VTextField
        v-model="username"
        label="Username"

        :rules="[requiredValidator]"
        :error-messages="errors.username"
        />
        </VCol>

        <!-- password -->
        <VCol cols="12">
        <VTextField
        v-model="password"
        label="Password"
        :rules="[requiredValidator]"
        :type="isPasswordVisible ? 'text' : 'password'"
        :error-messages="errors.password"
        :append-inner-icon="isPasswordVisible ? 'tabler-eye-off' : 'tabler-eye'"
        @click:append-inner="isPasswordVisible = !isPasswordVisible"
        />

        <div class="d-flex align-center flex-wrap justify-space-between mt-2 mb-4">
        <VCheckbox
        v-model="rememberMe"
        label="Remember me"
        />
        <RouterLink
        class="text-primary ms-2 mb-1"
        :to="{ name: 'forgot-password' }"
        >
        Forgot Password?
        </RouterLink>
        </div>

        <VBtn
        block
        type="submit"
        >
        Login
        </VBtn>


        </VCol>


        </VRow>

        <VRow>
        <VCol>


        <div class="alert-demo-v-model-wrapper">
        <VImg
        style="position: absolute;top: 242px;z-index: 1; width:21px; left: 100px;"
        :src="microsoft"
       
        />
       
        <VAlert
        v-model="isAlertVisible"
        color="error"
        variant="tonal"
        >
        {{err}}
        </VAlert>
        </div>
        
        <VBtn
        style="padding-left: 72px; padding-right: 72px; margin-left: 33px;"
        type="button"
        @click="msalLogin"
        >
        Sign in with MICROSOFT
        </VBtn>
        </VCol>
       
        </VRow>
        </VForm>
        </VCardText>
        </VCard>
        </VCol>
        </VRow>
</template>

<style lang="scss">
@use "@core/scss/template/pages/page-auth.scss";
.v-btn {
  
    text-transform: none !important;
   
}
.v-img__img, .v-img__picture, .v-img__gradient, .v-img__placeholder, .v-img__error {
    
    position: relative !important;
    
}
.bannerImg {
    object-fit: inherit !important;
}
.layout-footer{
  dispaly:none !important;
}
body {
    padding: 0px !important;
}
.v-img__img--contain {
    object-fit: inherit !important;
}
.v-img__img, .v-img__picture, .v-img__gradient, .v-img__placeholder, .v-img__error {
    position: absolute !important;
}
/* .v-col-xxl, .v-col-xxl-auto, .v-col-xxl-12, .v-col-xxl-11, .v-col-xxl-10, .v-col-xxl-9, .v-col-xxl-8, .v-col-xxl-7, .v-col-xxl-6, .v-col-xxl-5, .v-col-xxl-4, .v-col-xxl-3, .v-col-xxl-2, .v-col-xxl-1, .v-col-xl, .v-col-xl-auto, .v-col-xl-12, .v-col-xl-11, .v-col-xl-10, .v-col-xl-9, .v-col-xl-8, .v-col-xl-7, .v-col-xl-6, .v-col-xl-5, .v-col-xl-4, .v-col-xl-3, .v-col-xl-2, .v-col-xl-1, .v-col-lg, .v-col-lg-auto, .v-col-lg-12, .v-col-lg-11, .v-col-lg-10, .v-col-lg-9, .v-col-lg-8, .v-col-lg-7, .v-col-lg-6, .v-col-lg-5, .v-col-lg-4, .v-col-lg-3, .v-col-lg-2, .v-col-lg-1, .v-col-md, .v-col-md-auto, .v-col-md-12, .v-col-md-11, .v-col-md-10, .v-col-md-9, .v-col-md-8, .v-col-md-7, .v-col-md-6, .v-col-md-5, .v-col-md-4, .v-col-md-3, .v-col-md-2, .v-col-md-1, .v-col-sm, .v-col-sm-auto, .v-col-sm-12, .v-col-sm-11, .v-col-sm-10, .v-col-sm-9, .v-col-sm-8, .v-col-sm-7, .v-col-sm-6, .v-col-sm-5, .v-col-sm-4, .v-col-sm-3, .v-col-sm-2, .v-col-sm-1, .v-col, .v-col-auto, .v-col-12, .v-col-11, .v-col-10, .v-col-9, .v-col-8, .v-col-7, .v-col-6, .v-col-5, .v-col-4, .v-col-3, .v-col-2, .v-col-1 {
    width: 100%;
    padding: 0px !important;
} */
</style>

<route lang="yaml">
meta:
  layout: blank
  action: read
  subject: Auth
  redirectIfLoggedIn: true
</route>