<script setup>
import { VForm } from 'vuetify/components'
import { useAppAbility } from '@/plugins/casl/useAppAbility'
import AuthProvider from '@/views/pages/authentication/AuthProvider.vue'
import axios from '@axios'
import { useGenerateImageVariant } from '@core/composable/useGenerateImageVariant'
import { VNodeRenderer } from '@layouts/components/VNodeRenderer'
import jwt_decode from 'jwt-decode'

// import { themeConfig } from '@themeConfig'
// import {
//   emailValidator,
//   requiredValidator,
// } from '@validators'
// import authV2LoginIllustrationBorderedDark from '@images/pages/port-4.jpg'
// import authV2LoginIllustrationBorderedLight from '@images/pages/port-4.jpg'
// import authV2LoginIllustrationDark from '@images/pages/port-4.jpg'
// import authV2LoginIllustrationLight from '@images/pages/port-4.jpg'
// import authV2MaskDark from '@images/pages/port-4.jpg'
// import authV2MaskLight from '@images/pages/port-4.jpg'
import bannerimage from '@images/pages/port-4.jpg'
import logo from '@images/pages/omp-logo.png'
import microsoft from '@images/pages/microsoft.jpg'
import avatar1 from '@images/avatars/avatar-1.png'
import {users} from '@/helpers/helper'
//import {msalLogin} from '@/helpers/MSALhelper'
import {hostURL,URL} from '@/helpers/token'
import * as msal from 'msal';
import msalConfig from '../config'


const idToken=ref('')
const accessToken=ref('')

const isAlertVisible = ref(false)

const errors = ref({
  username: undefined,
  password: undefined,
  message: undefined
})
const err=ref('')

const msalLogin =()=>{
  const loginRequest = {
    scopes: ['openid', 'profile'],
    expiresIn: 600
  };
  const msalInstance = new msal.UserAgentApplication(msalConfig)
  msalInstance.loginPopup(loginRequest)
        .then((response) => {
          console.log('Login success:', response);
         // msalInstance.logout()
          accessToken.value = response.idToken.rawIdToken

          idToken.value = response.idToken.rawIdToken;
        

      axios.post(URL()+`/user_management`,{
      
        'requestType':'view',
      
      }, { 'headers': { Authorization: 'Bearer '+accessToken.value } })
      .then((response) => {
        console.log('Check user status')
        console.log(response.data);
        let data = response.data.data
        console.log(data);
          // Decode the ID token to access the user data
          const decodedToken = jwt_decode(idToken.value);
        //  console.log('Decoded token:', decodedToken);

          // Extract the user data from the decoded token
          // const userData = {
          //   name: decodedToken.name,
          //   email: decodedToken.email,
          //   role: decodedToken.roles[0],
          // };
          // console.log('User data:', userData);
           const abilitiesList =data.abilities

           if (abilitiesList.length === 0) {
             console.log("Abilities is empty!") 
             isAlertVisible.value = true
             err.value = 'Abilities not allowed to this user. Please contact the administrator for assistance.'
              return false
            
            }

           var abilitiesData=[]
           
           abilitiesList.forEach(item => {
           
            console.log(item.sub_module.short_code);
            if(item.add_permission){
             
              abilitiesData.push({    action: 'create',subject: item.sub_module.short_code,})
                  }

            if(item.delete_permission){
            
              abilitiesData.push({    action: 'delete',subject: item.sub_module.short_code,})
           
            }

            if(item.edit_permission){
             
              abilitiesData.push({    action: 'update',subject: item.sub_module.short_code,})
                 }


            if(item.view_permission){

           
              abilitiesData.push({    action: 'read',subject: item.sub_module.short_code,})
           
            }

          });
          console.log('abilitiesData')
          console.log(abilitiesData)

          var roles=''
          if(data.access_type=='user'){
            roles=data.id
            abilitiesData=[]
            abilitiesData.push({    action: 'manage',subject: 'all',})
          }
          if(data.access_type=='role'){

            roles=data.role
            abilitiesData.push({    action: 'read',subject: 'USER_PROFILE',})
           
          }

          const  userData = {
    id: data.id,
    loginName: data.login_name,
    fullName: data.login_name,
    username: data.user_name,
    department: data.department,
    avatar: data.image_data,
    email: data.email,
    role: 'admin',
    abilities:abilitiesData
  
  }

  
    const userAbilities = abilitiesData
    
    localStorage.setItem('userAbilities', JSON.stringify(userAbilities))
      ability.update(userAbilities)
      localStorage.setItem('userData', JSON.stringify(userData))
      localStorage.setItem('accessToken', JSON.stringify(accessToken.value))

//       localStorage.setItem('accessDepartments', JSON.stringify(data.access_departments))
// console.log(userAbilities)
      // Redirect to `to` query if exist or redirect to index route
      router.replace(route.query.to ? String(route.query.to) : '/')

      
       
          })
          .catch((error) => {
              console.log(error)
              isAlertVisible.value = true
              // console.log(error.message)
              // console.log(error.config)
             console.log(error.response)
             if(error.response.status >= 400){
              err.value = "Application access is restricted. Please contact the administrator for assistance."
             }
             if(error.response.status < 400){
              err.value = error.response.data.error
            }
             
          })
   
        })
        .catch((error) => {
          console.log('Login error:', error);
          isAlertVisible.value = true

         err.value = error
         //console.error(error)
         // msalInstance.logout()
        });
    
      // this.$AuthService.loginPopup() //with a popup
      //this.$AuthService.loginRedirect() //with a redirect
      
     // console.log(this.$AuthService)
    }



// const authThemeImg = useGenerateImageVariant(authV2LoginIllustrationLight, authV2LoginIllustrationDark, authV2LoginIllustrationBorderedLight, authV2LoginIllustrationBorderedDark, true)
// const authThemeMask = useGenerateImageVariant(authV2MaskLight, authV2MaskDark)
// const authLogo = useGenerateImageVariant(authV2MaskLight, authV2MaskDark)
const isPasswordVisible = ref(false)
const route = useRoute()
const router = useRouter()
const ability = useAppAbility()
const refVForm = ref()

</script>

<template>
  <VRow class="no-gap">
    <v-col cols="12" lg="8" class="no-padding">
      <div style="position: relative;">
        <v-img class="bannerImg" :src="bannerimage" style="box-shadow: 8px 0 8px -5px #333; padding-bottom: 50px !important; z-index: 1; object-fit:fill !important">
          <!-- Your main image -->
        </v-img>
        <img :src="logo" style="height: 15%; position: absolute; top: 70%; left: 5%; background-color: #ffffff; padding: 15px 24px 15px 24px; border-radius: 24px; z-index: 2;"/>
          <!-- Overlay image -->
      </div>
    </v-col>

    <v-col cols="12" lg="4" class="d-flex align-center justify-center">
      <VCard>
        <VCardText>
          <img
            max-width="505"
            :src="logo"
            style="height: 135px; margin-bottom: 30px; object-fit: contain !important; margin-left:54px;"
          />

          <p class="mb-0">
            Please sign-in to your account and start the adventure
          </p>
        </VCardText>

        <VCardText>
          <VForm ref="refVForm" @submit.prevent="onSubmit">
            <VRow>
              <VCol>
                <div class="alert-demo-v-model-wrapper">
                  <VAlert v-model="isAlertVisible" color="error" variant="tonal">
                    {{ err }}
                  </VAlert>
                </div>

                <VBtn style="padding-left: 72px; padding-right: 72px; margin-left: 33px;" type="button" @click="msalLogin">
                  <VImg style="position: absolute; z-index: 20; width: 21px; left: 40px;" :src="microsoft" />
                  Sign in with MICROSOFT
                </VBtn>
              </VCol>
            </VRow>
          </VForm>
        </VCardText>
      </VCard>
    </v-col>
  </VRow>
</template>

<style scoped>
  .no-gap {
    margin-bottom: -20px; /* Adjust this value as needed */
  }
  
  .no-padding {
    padding: 0 !important;
  }
  
.v-img__img{
  object-fit: fill !important;
}
  </style>

<route lang="yaml">
meta:
  layout: blank
  action: read
  subject: Auth
  redirectIfLoggedIn: true
</route>