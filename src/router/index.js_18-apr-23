import { setupLayouts } from 'virtual:generated-layouts'
import { createRouter, createWebHistory } from 'vue-router'
import { isUserLoggedIn } from './utils'
import routes from '~pages'
//import pages from './routes/pages'
import { canNavigate } from '@layouts/plugins/casl'


const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    // ℹ️ We are redirecting to different pages based on role.
    // NOTE: Role is just for UI purposes. ACL is based on abilities.
    {
      path: '/',
      redirect: to => {
        const userData = JSON.parse(localStorage.getItem('userData') || '{}')
        const userRole = userData && userData.role ? userData.role : null
        if (userRole === 'admin')
          return { name: 'dashboards-rfid-for-people' }
        if (userRole === 'client')
          return { name: 'access-control' }
        
        return { name: 'login', query: to.query }
      },
    },
    {
      path: '/cctv/nvrsetup/list',
      redirect: to => {        
        return { name: 'cctv-nvrsetup-list' }
      },
     
    },
   
    {
      path: '/pages/rfidpeople',
      redirect: () => ({ name: 'employee-setup' }),
    },  
    {
      path: '/pages/user-profile',
      redirect: () => ({ name: 'pages-user-profile-tab', params: { tab: 'profile' } }),
    },
    {
      path: '/pages/account-settings',
      redirect: () => ({ name: 'pages-account-settings-tab', params: { tab: 'account' } }),
    },
    {
      path: '/reports/ecommerce',
      redirect: () => ({ name: 'reports-ecommerce-tab', params: { tab: 'ecommerce-reports' } }),
    },
	{
      path: '/dashboards/rfid-for-people',
      redirect: to => { name: 'dashboards-rfid-for-people'},
    },	
    {
      path: '/dashboards/rfid-for-rolling-stocks',
      redirect: to => { name: 'public/dashboards-rfid-for-rolling-stocks'},
    },
   // ...pages,
    ...setupLayouts(routes),
   
    // {
    //   path: '*',
    //   redirect: 'error-404',
    // },
  ],
})


// Docs: https://router.vuejs.org/guide/advanced/navigation-guards.html#global-before-guards
router.beforeEach(to => {
  const isLoggedIn = isUserLoggedIn()

  /*
  
    ℹ️ Commented code is legacy code
  
    if (!canNavigate(to)) {
      // Redirect to login if not logged in
      // ℹ️ Only add `to` query param if `to` route is not index route
      if (!isLoggedIn)
        return next({ name: 'login', query: { to: to.name !== 'index' ? to.fullPath : undefined } })
  
      // If logged in => not authorized
      return next({ name: 'not-authorized' })
    }
  
    // Redirect if logged in
    if (to.meta.redirectIfLoggedIn && isLoggedIn)
      next('/')
  
    return next()
  
    */
  if (canNavigate(to)) {
    if (to.meta.redirectIfLoggedIn && isLoggedIn)
      return '/'
  }
  else {
    if (isLoggedIn)
      return { name: 'not-authorized' }
    else
      return { name: 'login', query: { to: to.name !== 'index' ? to.fullPath : undefined } }
  }
})


export default router
